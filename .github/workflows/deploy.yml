name: Deploy to Personal Server

on:
  # schedule:
  #   - cron: '0 */12 * * *'  # Check every 12 hours - DISABLED
  push:
    branches: [ main ]  # Deploy from your main branch too
  workflow_dispatch: # Allow manual trigger

jobs:
  check-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to compare with upstream
        token: ${{ secrets.GITHUB_TOKEN }}
        
    # Upstream syncing disabled - deploy only from current branch
      
    - name: Setup Node.js
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Clean install dependencies
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        rm -rf node_modules package-lock.json
        npm install
        # Install platform-specific lightningcss binary for GitHub Actions (ubuntu)
        npm install lightningcss-linux-x64-gnu --save-optional
      
    - name: Build application
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      env:
        REACT_APP_API_URL: https://streamscene.net
        REACT_APP_SERVER_URL: https://streamscene.net
      run: |
        npm run build

    - name: Compile TypeScript
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        echo "Compiling TypeScript to JavaScript..."
        npm install typescript --save-dev
        npx tsc --project server/tsconfig.json
        
    - name: Create deployment package
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        # Create a deployment directory
        mkdir -p deploy
        
        # Copy built client files
        cp -r public/ deploy/
        
        # Copy server source files  
        cp -r server/ deploy/
        
        # Copy compiled TypeScript files
        cp -r dist/ deploy/
        
        # Copy configuration files
        cp ecosystem.config.cjs deploy/
        cp package-server.json deploy/package.json
        
        # Create production environment file (will override any existing .env)
        cat > deploy/.env << EOF
        NODE_ENV=production
        PORT=8000
        CLIENT_URL=https://streamscene.net
        REACT_APP_API_URL=https://streamscene.net
        REACT_APP_SERVER_URL=https://streamscene.net
        REACT_APP_ENABLE_WEBSOCKET=true
        BASE_URL=https://streamscene.net
        ALLOW_DEMO_LOGIN=true
        SESSION_SECRET=${{ secrets.SESSION_SECRET }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_CALLBACK_URL=https://streamscene.net/auth/google/callback
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
        THREADS_CLIENT_ID=${{ secrets.THREADS_CLIENT_ID }}
        THREADS_CLIENT_SECRET=${{ secrets.THREADS_CLIENT_SECRET }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        DB_HOST=localhost
        DB_NAME=stream_scene_db
        DB_USER=root
        DB_PASS=StreamRoot2024!
        ENABLE_MONITORING=true
        LOG_LEVEL=error
        EOF

    - name: Quick connectivity test
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        echo "Testing connectivity to server..."
        timeout 10 nc -zv ${{ secrets.SERVER_HOST }} ${{ secrets.SERVER_PORT || 22 }} || echo "Connection test failed"

    - name: Setup server directory
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 15s
        command_timeout: 30s
        debug: true
        use_insecure_cipher: true
        cipher: aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,aes192-cbc,aes256-cbc
        script: |
          echo "Connected successfully"
          whoami
          pwd

    - name: Setup server directories
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 15s
        command_timeout: 30s
        script: |
          # Create application directory if it doesn't exist
          mkdir -p /var/www/stream-scene
          
          # Create logs directory
          mkdir -p /var/www/stream-scene/logs
          echo "Directory setup completed successfully"

    - name: Copy files to server
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 300s
        source: "deploy/*"
        target: "/var/www/stream-scene/"
        strip_components: 1
        
    - name: Deploy application
      if: steps.check_changes.outputs.should_deploy == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 30s
        command_timeout: 5m
        debug: false
        script: |
          cd /var/www/stream-scene
          
          # Install PM2 if needed
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          echo "Installing production dependencies..."
          npm install --production
          
          echo "Checking compiled files..."
          ls -la dist/server/*.js | head -5 || echo "No JS files found in dist/server/"
          
          echo "Setting up database schema..."
          echo "Installing tsx for seed script execution..."
          npm install tsx --save-dev
          
          echo "Fixing User table schema for Threads integration..."
          mysql -h localhost -u root -pStreamRoot2024! stream_scene_db -e "ALTER TABLE users ADD COLUMN IF NOT EXISTS threads_access_token VARCHAR(500) NULL, ADD COLUMN IF NOT EXISTS threads_user_id VARCHAR(100) NULL;" || {
            echo "Schema update failed or columns already exist. Continuing..."
          }
          
          echo "Running database seed script to ensure proper schema..."
          npm run seed:production || {
            echo "WARNING: Database seed failed. This might be expected if database is already seeded."
            echo "Continuing with deployment..."
          }
          
          echo "Cleaning up demo task data..."
          node server/cleanup-demo-tasks.js || {
            echo "WARNING: Demo task cleanup failed. This might be expected."
            echo "Continuing with deployment..."
          }
          
          echo "Stopping existing PM2 processes..."
          pm2 stop stream-scene || echo "No existing process to stop"
          pm2 delete stream-scene || echo "No existing process to delete"
          
          echo "Starting with PM2 using ecosystem config..."
          pm2 start ecosystem.config.cjs --env production
          pm2 save
          
          echo "Deployment completed successfully!"
          pm2 status
